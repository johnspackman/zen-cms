{
  "$schema": "https://qooxdoo.org/schema/compile-1-0-0.json",
  "targets": [
    {
      "type": "source",
      "application-types": ["browser"],
      "outputPath": "compiled/source",
      "proxySourcePath": "source/proxies",
      "babelOptions": {
        "targets": "Chrome >= 72, Firefox >= 64, edge >= 18"
      },
      "environment": {
        "qx.buildType": "source",
        "zx.io.remote.NetworkEndpoint.server": false
      },
      "writeCompileInfo": true
    },
    {
      "type": "source",
      "outputPath": "compiled/source-node",
      "application-types": ["node"],
      "babelOptions": {
        "targets": "node >= 14"
      },
      "environment": {
        "qx.buildType": "source",
        "zx.cms.thinClientTargetPath": "compiled/source",
        "zx.io.remote.NetworkEndpoint.server": true
      },
      "writeCompileInfo": true,
      "addCreatedAt": true
    },
    {
      "type": "build",
      "application-types": ["browser"],
      "outputPath": "compiled/build",
      "proxySourcePath": "source/proxies",
      "babelOptions": {
        "targets": "Chrome >= 72, Firefox >= 64, edge >= 18"
      },
      "environment": {
        "zx.io.remote.NetworkEndpoint.server": false,
        "qx.buildType": "build"
      }
    },
    {
      "type": "build",
      "outputPath": "compiled/build-node",
      "application-types": ["node"],
      "babelOptions": {
        "targets": "node >= 14"
      },
      "environment": {
        "qx.buildType": "build",
        "zx.cms.thinClientTargetPath": "compiled/build",
        "zx.io.remote.NetworkEndpoint.server": true
      }
    }
  ],
  "defaultTarget": "source",
  "locales": ["en"],
  "libraries": [".", "../qxl.widgetbrowser", "../UploadMgr"],
  "environment": {
    "qx.icontheme": "Tango",
    "zx.cms.client.theme": "zx.cms.client.theme.Simple",
    "zx.io.remote.Endpoint.traceIo": false,
    "zx.io.remote.BrowserXhrEndpoint.traceIo": false
  },
  "applications": [
    {
      "title": "CMS Administrators Control Panel",
      "class": "zx.cms.client.AdminApp",
      "theme": "zx.cms.client.theme.tangible.Theme",
      "name": "adminApp",
      "group": "serve"
    },
    {
      "title": "ZX Server Command Line app",
      "description": "Command Line app (`zx`) used for managing and running the server infrastructure (including the CMS); this version is compiled with the `zx.test.TestsAppServer` class to support the unit tests and demonstrators provided by the `browserTests` application",
      "class": "zx.cli.CliApp",
      "type": "node",
      "name": "cli",
      "group": ["serve", "cli"],
      "include": ["zx.test.TestsAppServer"],
      "environment": {
        "zx.cli.ServeCommand.serverClassname": "zx.test.TestsAppServer"
      }
    },
    {
      "title": "Zx Puppeteer Server",
      "description": "Server app that runs inside the zenesisuk/zx-puppeteer-server Docker container",
      "class": "zx.cli.PuppeteerServerApp",
      "type": "node",
      "name": "puppeteer-server"
    },
    {
      "title": "Tests Suite - Desktop Application",
      "description": "Desktop application for browsing and running tests and demonstrators; also needs thinclient and a CLI built with the `zx.test.TestsAppServer` main class",
      "class": "zx.test.TestsAppBrowser",
      "theme": "zx.cms.client.theme.tangible.Theme",
      "name": "browserTests",
      "group": ["tests"]
    },
    {
      "title": "Tests Suite - Thin Client Application",
      "description": "Thin Client application with tests and demonstrators; used by `zx.test.TestsAppBrowser`",
      "class": "zx.test.TestsAppThinClient",
      "name": "thinclient",
      "exclude": ["qx.ui.*"],
      "type": "browser",
      "group": ["serve", "tests"]
    },
    {
      "title": "Tests - Additional Tests for Node.JS",
      "description": "Standalone Node.JS application with various unit tests",
      "class": "zx.test.NodeUnitTestsApp",
      "name": "nodeUnitTests",
      "exclude": ["qx.ui.*"],
      "type": "node"
    },
    {
      "title": "Tests - PeerOne",
      "description": "Simple peer demo app for `zx.io.persistence` when calling between windows; must be paired with `PeerTwo`",
      "class": "zx.test.io.remote.PeerOne",
      "theme": "zx.cms.client.theme.tangible.Theme",
      "name": "peerone",
      "group": ["tests"]
    },
    {
      "title": "Tests - PeerTwo",
      "description": "Simple peer demo app for `zx.io.persistence` when calling between windows; must be paired with `PeerOne`",
      "class": "zx.test.io.remote.PeerTwo",
      "theme": "zx.cms.client.theme.tangible.Theme",
      "name": "peertwo",
      "group": ["tests"]
    },
    {
      "title": "Remote API browser test app",
      "class": "zx.demo.io.api.TestApp",
      "theme": "zx.cms.client.theme.tangible.Theme",
      "name": "remote-api-browser-test",
      "type": "browser",
      "bootPath": "source/boot"
    },
    {
      "title": "Remote API HTTP server test app",
      "name": "remote-api-server-test",
      "exclude": ["qx.bom.Selector"],
      "type": "node",
      "class": "zx.demo.io.api.srv.ServerApp"
    },

    {
      "title": "Demo app for running work in the same process",
      "class": "zx.demo.server.work.LocalWorkApp",
      "name": "demo-work-local",
      "type": "node",
      "include": ["qx.core.Init"]
    },
    {
      "title": "Demo app for running work in web workers (TODO: needs app loader)",
      "class": "zx.demo.server.work.webworkers.WebWorkerApp",
      "name": "demo-work-web-workers",
      "type": "browser",
      "bootPath": "source/boot",
      "include": ["qx.core.Init"]
    },
    {
      "title": "Worker service for web workers (TODO: needs app loader)",
      "class": "zx.demo.server.work.webworkers.WebWorkerService",
      "name": "web-worker-service",
      "description": "todo: we need a loader for web workers to make this functional",
      "type": "browser"
    },
    {
      "title": "Demo app for running work in node worker threads",
      "class": "zx.demo.server.work.nodeworkers.NodeWorkerApp",
      "name": "demo-work-node-workers",
      "type": "node",
      "include": ["qx.core.Init"]
    },
    {
      "title": "Worker service for node worker threads",
      "class": "zx.demo.server.work.nodeworkers.NodeWorkerService",
      "name": "node-worker-service",
      "type": "node"
    },
    {
      "title": "Demo app for running work in a separate node process",
      "class": "zx.demo.server.work.localpeer.LocalPeerApp",
      "name": "demo-work-local-peers",
      "type": "node",
      "include": ["qx.core.Init"]
    },
    {
      "title": "Worker service for separate node process",
      "class": "zx.demo.server.work.localpeer.LocalPeerService",
      "name": "local-peer-service",
      "type": "node"
    },
    {
      "title": "Demo app for running work in a docker container",
      "class": "zx.demo.server.work.dockerpeer.DockerPeerApp",
      "name": "demo-work-docker-peers",
      "type": "node",
      "include": ["qx.core.Init"]
    },
    {
      "title": "Worker service for a docker container",
      "class": "zx.demo.server.work.dockerpeer.DockerPeerService",
      "name": "work-docker-peer-service",
      "type": "node",
      "include": ["qx.core.Init"]
    },
    {
      "title": "Demo app for the worker pool part of a distributed work infrastructure",
      "class": "zx.demo.server.work.remotedocker.RemoteDockerPoolApp",
      "name": "demo-work-remote-docker-pool",
      "type": "node",
      "include": ["qx.core.Init"]
    },
    {
      "title": "Demo app for the work scheduler part of a distributed work infrastructure",
      "class": "zx.demo.server.work.remotedocker.RemoteDockerSchedulerApp",
      "name": "demo-work-remote-docker-scheduler",
      "type": "node",
      "include": ["qx.core.Init"]
    }
  ],
  "sass": {
    "compiler": "latest",
    "copyOriginal": true
  }
}
